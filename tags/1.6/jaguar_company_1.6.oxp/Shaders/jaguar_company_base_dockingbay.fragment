/* jaguar_company_base_dockingbay.fragment for the Jaguar Company Base.
**
** Copyright (C) 2012 Tricky
**
** This work is licensed under the Creative Commons
** Attribution-Noncommercial-Share Alike 3.0 Unported License.
**
** To view a copy of this license, visit
** http://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter
** to Creative Commons, 171 Second Street, Suite 300, San Francisco,
** California, 94105, USA.
**
** Pixel/Fragment shader for the Jaguar Company Base docking bay.
*/

#define MAX_LIGHTS 8
#define NUM_LIGHTS 2

#ifdef IS_OOLITE
#define BASE_LIGHT 1
#else
#define BASE_LIGHT 0
#endif

varying vec2        vTexCoord;
varying vec3        vEyeVector;   // These are all in tangent space
varying vec3        vLightVectors[MAX_LIGHTS]; 

uniform sampler2D   uColorMap;
uniform sampler2D   uNormalMap;
uniform float       uTime;

const float         KspecExponent = 5.0;
const float         Kgamma = 0.66;
const float         Kalpha = 0.75;
const vec3          Kwater = vec3(0.04, 0.08, 0.16);

void Light(in vec3 lightVector, in vec3 normal, in vec3 lightColor, in vec3 eyeVector,
           in float KspecExponent, inout vec3 totalDiffuse, inout vec3 totalSpecular)
{
    lightVector = normalize(lightVector);
    vec3 reflection = normalize(-reflect(lightVector, normal));

    totalDiffuse += gl_FrontMaterial.diffuse.rgb * lightColor * max(dot(normal, lightVector), 0.0);
    totalSpecular += lightColor * pow(max(dot(reflection, eyeVector), 0.0), KspecExponent);
}

#define LIGHT(idx, vector) Light(vector, normal, gl_LightSource[idx].diffuse.rgb, eyeVector, KspecExponent, diffuse, specular)

void main()
{
    vec3 eyeVector = normalize(vEyeVector);
    vec3 diffuse = vec3(0.0), specular = vec3(0.0);

    /* Ripple */
    vec2 p = -1.0 + 2.0 * vTexCoord;
    float len = length(p);
    vec2 uv = vTexCoord + (p / len) * cos(len * 12.0 - uTime) * 0.005;
    vec3 colorMap = texture2D(uColorMap, uv).rgb;
    vec3 normal = normalize(texture2D(uNormalMap, uv).rgb - 0.5);

    /* Lights */
#ifdef OO_LIGHT_0_FIX
    int i = 0;
#else
    int i = BASE_LIGHT;
#endif
    for (; i < NUM_LIGHTS; i++)
    {
        LIGHT(i, vLightVectors[i]);
    }

    /* Texture */
    diffuse += gl_FrontMaterial.ambient.rgb * gl_LightModel.ambient.rgb;
    vec3 color = diffuse * colorMap;
    color += colorMap * specular;
    color += Kwater;
    color *= Kgamma;

    /* Return final result */
    gl_FragColor = vec4(color, Kalpha);
}
